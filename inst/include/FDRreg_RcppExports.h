// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#ifndef __FDRreg_RcppExports_h__
#define __FDRreg_RcppExports_h__

#include <RcppArmadillo.h>
#include <Rcpp.h>

namespace FDRreg {

    using namespace Rcpp;

    namespace {
        void validateSignature(const char* sig) {
            Rcpp::Function require = Rcpp::Environment::base_env()["require"];
            require("FDRreg", Rcpp::Named("quietly") = true);
            typedef int(*Ptr_validate)(const char*);
            static Ptr_validate p_validate = (Ptr_validate)
                R_GetCCallable("FDRreg", "FDRreg_RcppExport_validate");
            if (!p_validate(sig)) {
                throw Rcpp::function_not_exported(
                    "C++ function with signature '" + std::string(sig) + "' not found in FDRreg");
            }
        }
    }

    inline int mysample(NumericVector probs) {
        typedef SEXP(*Ptr_mysample)(SEXP);
        static Ptr_mysample p_mysample = NULL;
        if (p_mysample == NULL) {
            validateSignature("int(*mysample)(NumericVector)");
            p_mysample = (Ptr_mysample)R_GetCCallable("FDRreg", "FDRreg_mysample");
        }
        RObject __result;
        {
            RNGScope __rngScope;
            __result = p_mysample(Rcpp::wrap(probs));
        }
        if (__result.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (__result.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(__result).c_str());
        return Rcpp::as<int >(__result);
    }

    inline double trapezoid(NumericVector x, NumericVector y) {
        typedef SEXP(*Ptr_trapezoid)(SEXP,SEXP);
        static Ptr_trapezoid p_trapezoid = NULL;
        if (p_trapezoid == NULL) {
            validateSignature("double(*trapezoid)(NumericVector,NumericVector)");
            p_trapezoid = (Ptr_trapezoid)R_GetCCallable("FDRreg", "FDRreg_trapezoid");
        }
        RObject __result;
        {
            RNGScope __rngScope;
            __result = p_trapezoid(Rcpp::wrap(x), Rcpp::wrap(y));
        }
        if (__result.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (__result.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(__result).c_str());
        return Rcpp::as<double >(__result);
    }

    inline NumericVector dnormix(NumericVector y, NumericVector weights, NumericVector mu, NumericVector tau2) {
        typedef SEXP(*Ptr_dnormix)(SEXP,SEXP,SEXP,SEXP);
        static Ptr_dnormix p_dnormix = NULL;
        if (p_dnormix == NULL) {
            validateSignature("NumericVector(*dnormix)(NumericVector,NumericVector,NumericVector,NumericVector)");
            p_dnormix = (Ptr_dnormix)R_GetCCallable("FDRreg", "FDRreg_dnormix");
        }
        RObject __result;
        {
            RNGScope __rngScope;
            __result = p_dnormix(Rcpp::wrap(y), Rcpp::wrap(weights), Rcpp::wrap(mu), Rcpp::wrap(tau2));
        }
        if (__result.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (__result.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(__result).c_str());
        return Rcpp::as<NumericVector >(__result);
    }

    inline NumericVector marnormix(NumericVector y, NumericVector sigma2, NumericVector weights, NumericVector mu, NumericVector tau2) {
        typedef SEXP(*Ptr_marnormix)(SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_marnormix p_marnormix = NULL;
        if (p_marnormix == NULL) {
            validateSignature("NumericVector(*marnormix)(NumericVector,NumericVector,NumericVector,NumericVector,NumericVector)");
            p_marnormix = (Ptr_marnormix)R_GetCCallable("FDRreg", "FDRreg_marnormix");
        }
        RObject __result;
        {
            RNGScope __rngScope;
            __result = p_marnormix(Rcpp::wrap(y), Rcpp::wrap(sigma2), Rcpp::wrap(weights), Rcpp::wrap(mu), Rcpp::wrap(tau2));
        }
        if (__result.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (__result.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(__result).c_str());
        return Rcpp::as<NumericVector >(__result);
    }

    inline NumericVector rnormix(int n, NumericVector weights, NumericVector mu, NumericVector tau2) {
        typedef SEXP(*Ptr_rnormix)(SEXP,SEXP,SEXP,SEXP);
        static Ptr_rnormix p_rnormix = NULL;
        if (p_rnormix == NULL) {
            validateSignature("NumericVector(*rnormix)(int,NumericVector,NumericVector,NumericVector)");
            p_rnormix = (Ptr_rnormix)R_GetCCallable("FDRreg", "FDRreg_rnormix");
        }
        RObject __result;
        {
            RNGScope __rngScope;
            __result = p_rnormix(Rcpp::wrap(n), Rcpp::wrap(weights), Rcpp::wrap(mu), Rcpp::wrap(tau2));
        }
        if (__result.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (__result.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(__result).c_str());
        return Rcpp::as<NumericVector >(__result);
    }

    inline IntegerVector draw_mixture_component(NumericVector y, NumericVector sigma2, NumericVector weights, NumericVector mu, NumericVector tau2) {
        typedef SEXP(*Ptr_draw_mixture_component)(SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_draw_mixture_component p_draw_mixture_component = NULL;
        if (p_draw_mixture_component == NULL) {
            validateSignature("IntegerVector(*draw_mixture_component)(NumericVector,NumericVector,NumericVector,NumericVector,NumericVector)");
            p_draw_mixture_component = (Ptr_draw_mixture_component)R_GetCCallable("FDRreg", "FDRreg_draw_mixture_component");
        }
        RObject __result;
        {
            RNGScope __rngScope;
            __result = p_draw_mixture_component(Rcpp::wrap(y), Rcpp::wrap(sigma2), Rcpp::wrap(weights), Rcpp::wrap(mu), Rcpp::wrap(tau2));
        }
        if (__result.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (__result.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(__result).c_str());
        return Rcpp::as<IntegerVector >(__result);
    }

    inline List PredictiveRecursionFDR(NumericVector z, NumericVector grid_x, NumericVector theta_guess, double nullprob = 0.95, double mu0 = 0.0, double sig0 = 1.0, double decay = -0.67) {
        typedef SEXP(*Ptr_PredictiveRecursionFDR)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_PredictiveRecursionFDR p_PredictiveRecursionFDR = NULL;
        if (p_PredictiveRecursionFDR == NULL) {
            validateSignature("List(*PredictiveRecursionFDR)(NumericVector,NumericVector,NumericVector,double,double,double,double)");
            p_PredictiveRecursionFDR = (Ptr_PredictiveRecursionFDR)R_GetCCallable("FDRreg", "FDRreg_PredictiveRecursionFDR");
        }
        RObject __result;
        {
            RNGScope __rngScope;
            __result = p_PredictiveRecursionFDR(Rcpp::wrap(z), Rcpp::wrap(grid_x), Rcpp::wrap(theta_guess), Rcpp::wrap(nullprob), Rcpp::wrap(mu0), Rcpp::wrap(sig0), Rcpp::wrap(decay));
        }
        if (__result.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (__result.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(__result).c_str());
        return Rcpp::as<List >(__result);
    }

}

#endif // __FDRreg_RcppExports_h__
